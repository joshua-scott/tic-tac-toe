{"version":3,"sources":["app.js","cpu.js"],"names":["cells","document","querySelectorAll","wins","movesMade","makeMove","isEmpty","textContent","isGameOver","cpuMove","lastPlayer","checkForWinner","gameOver","checkForDraw","board","buildBoard","result","forEach","win","threeInARow","c","push","cell","first","second","third","b","winner","alert","newGame","addEventListener","winOrBlock","goInCentre","goInCorner","goInRemaining","which","letter","twos","filter","twoInARow","length","console","log","winningPattern","shuffle","pop","i","blanks","letters","cellContents","corners","remaining","arr","sort","Math","random","trivial","where"],"mappings":"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","file":"app.js","sourcesContent":["const cells = document.querySelectorAll('.cell');\r\n\r\nconst wins = [\r\n  [0,1,2], [3,4,5], [6,7,8],  // horizontal\r\n  [0,3,6], [1,4,7], [2,5,8],  // vertical\r\n  [0,4,8], [2,4,6]            // diagonal\r\n];\r\n\r\nlet movesMade = 0;\r\n\r\nfunction makeMove() {\r\n  if (!isEmpty(this)) return;\r\n\r\n  this.textContent = 'X';\r\n  movesMade++;\r\n  \r\n  if (isGameOver('Player')) return;\r\n\r\n  cpuMove();\r\n  isGameOver('CPU');\r\n}\r\n\r\nfunction isGameOver(lastPlayer) {\r\n  if (checkForWinner()) {\r\n    gameOver(lastPlayer);\r\n    return true;\r\n  } else if (checkForDraw()) {\r\n    gameOver('Draw');\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction checkForWinner() {\r\n  const board = buildBoard();\r\n  \r\n  // Check the board against 'wins' array\r\n  let result = false;\r\n  wins.forEach(win => {\r\n    if (threeInARow(board, ...win)) {\r\n      result = true;\r\n    }\r\n  });\r\n  return result;\r\n}\r\n\r\n// Build array to represent the board\r\nfunction buildBoard() {\r\n  const board = [];\r\n  cells.forEach(c => board.push(c.textContent));\r\n  return board;\r\n}\r\n\r\nfunction checkForDraw() {\r\n  return (movesMade >= 9);\r\n}\r\n\r\nfunction isEmpty(cell) {\r\n  return cell.textContent === '';\r\n}\r\n\r\nfunction threeInARow(board, first, second, third) {\r\n  const b = board;\r\n  return (b[first] !== '' && b[first] === b[second] && b[second] === b[third]);\r\n}\r\n\r\nfunction gameOver(winner) {\r\n  winner === 'Draw' ? alert(`It's a draw!`) : alert(`${winner} wins!`);\r\n  newGame();\r\n}\r\n\r\nfunction newGame() {\r\n  movesMade = 0;\r\n  cells.forEach(c => c.textContent = '');\r\n}\r\n\r\ncells.forEach(c => c.addEventListener('click', makeMove));","function cpuMove() {\r\n  movesMade++;\r\n\r\n  if (winOrBlock('win')) return;\r\n  else if (winOrBlock('block')) return;\r\n  else if (goInCentre()) return;\r\n  else if (goInCorner()) return;\r\n  else goInRemaining();\r\n}\r\n\r\nfunction winOrBlock(which) {\r\n  const letter = which === 'win' ? 'O' : 'X';\r\n  // Look for 2 in a row, where we can win or block a win\r\n  const board = buildBoard();\r\n  const twos = wins.filter(win => twoInARow(board, win, letter));\r\n\r\n  if (twos.length === 0) {\r\n    // We can't win/block on this turn\r\n    console.log(`twos is empty, so can't ${which}`);\r\n    return false;\r\n  } else {\r\n    // We can win/block! Grab one of the winning moves, and fill in the blank\r\n    const winningPattern = shuffle(twos).pop();\r\n    for (let i = 0; i < winningPattern.length; i++) {\r\n      if (board[winningPattern].textContent === '') {\r\n        board[winningPattern].textContent = letter;\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// check if we have two given letters in a row, with a blank space\r\nfunction twoInARow(board, winningPattern, letter) {\r\n  let blanks = 0;\r\n  let letters = 0;\r\n\r\n  for (let i = 0; i < winningPattern.length; i++) {\r\n    const cellContents = board[winningPattern[i]].textContent;\r\n    if (cellContents === '') {\r\n      blanks++;\r\n    } else if (cellContents === letter) {\r\n      letters++;\r\n    }\r\n  }\r\n  return (blanks === 1 && letters === 2);\r\n}\r\n\r\nfunction goInCentre() {\r\n  if (isEmpty(cells[4])) {\r\n    cells[4].textContent = 'O';\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction goInCorner() {\r\n  const corners = shuffle([0, 2, 6, 8]);\r\n  for (let i = 0; i < corners.length; i++) {\r\n    if (isEmpty(cells[corners[i]])) {\r\n      cells[corners[i]].textContent = 'O';\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction goInRemaining() {\r\n  const remaining = shuffle([1, 3, 5, 7]);\r\n  for (let i = 0; i < remaining.length; i++) {\r\n    if (isEmpty(cells[remaining[i]])) {\r\n      cells[remaining[i]].textContent = 'O';\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction shuffle(arr) {\r\n  return arr.sort(() => 0.5 - Math.random);\r\n}\r\n\r\nfunction trivial() {\r\n  // Just go in the first available place for now...\r\n  for (let where = 0; where < 9; where++) {\r\n    if (isEmpty(cells[where])) {\r\n      cells[where].textContent = 'O';\r\n      return;\r\n    }\r\n  }\r\n}"]}