{"version":3,"sources":["app.js","cpu.js"],"names":["cells","document","querySelectorAll","wins","movesMade","makeMove","isEmpty","dataset","index","textContent","classList","add","isGameOver","setTimeout","cpuMove","lastPlayer","checkForWinner","gameOver","checkForDraw","board","buildBoard","result","forEach","win","threeInARow","c","push","first","second","third","b","winner","alert","newGame","remove","addEventListener","winOrBlock","goInCentre","goInRemaining","which","letter","twos","filter","twoInARow","length","winningPattern","shuffle","pop","i","markCell","blanks","letters","cellContents","corners","remaining","possibleMoves","arr","sort","Math","random"],"mappings":"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","file":"app.js","sourcesContent":["const cells = document.querySelectorAll('.cell');\r\n\r\nconst wins = [\r\n  [0,1,2], [3,4,5], [6,7,8],  // horizontal\r\n  [0,3,6], [1,4,7], [2,5,8],  // vertical\r\n  [0,4,8], [2,4,6]            // diagonal\r\n];\r\n\r\nlet movesMade = 0;\r\n\r\nfunction makeMove() {\r\n  if (!isEmpty(this.dataset.index)) return;\r\n\r\n  this.textContent = 'X';\r\n  this.classList.add('blue');\r\n  movesMade++;\r\n  \r\n  if (isGameOver('Player')) return;\r\n\r\n  // Allow a little time for DOM to update (and simulate 'thinking')\r\n  setTimeout(() => {\r\n    cpuMove();\r\n    isGameOver('CPU');\r\n  }, 500);\r\n}\r\n\r\nfunction isGameOver(lastPlayer) {\r\n  if (checkForWinner()) {\r\n    gameOver(lastPlayer);\r\n    return true;\r\n  } else if (checkForDraw()) {\r\n    gameOver('Draw');\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction checkForWinner() {\r\n  const board = buildBoard();\r\n  \r\n  // Check the board against 'wins' array\r\n  let result = false;\r\n  wins.forEach(win => {\r\n    if (threeInARow(board, ...win)) {\r\n      result = true;\r\n    }\r\n  });\r\n  return result;\r\n}\r\n\r\n// Build array to represent the board\r\nfunction buildBoard() {\r\n  const board = [];\r\n  cells.forEach(c => board.push(c.textContent));\r\n  return board;\r\n}\r\n\r\nfunction checkForDraw() {\r\n  return (movesMade >= 9);\r\n}\r\n\r\nfunction isEmpty(index) {\r\n  return cells[index].textContent === '';\r\n}\r\n\r\nfunction threeInARow(board, first, second, third) {\r\n  const b = board;\r\n  return (b[first] !== '' && b[first] === b[second] && b[second] === b[third]);\r\n}\r\n\r\nfunction gameOver(winner) {\r\n  // Allow a little time for DOM to update\r\n  setTimeout(() => {\r\n    winner === 'Draw' ? alert(`It's a draw!`) : alert(`${winner} wins!`);\r\n    newGame();\r\n  }, 10);\r\n}\r\n\r\nfunction newGame() {\r\n  movesMade = 0;\r\n  cells.forEach(c => {\r\n    c.classList.remove('blue', 'red');\r\n    c.textContent = '';\r\n  });\r\n}\r\n\r\ncells.forEach(c => c.addEventListener('click', makeMove));","function cpuMove() {\r\n  movesMade++;\r\n\r\n  if (winOrBlock('win')) return;\r\n  else if (winOrBlock('block')) return;\r\n  else if (goInCentre()) return;\r\n  else goInRemaining();\r\n}\r\n\r\nfunction winOrBlock(which) {\r\n  const letter = which === 'win' ? 'O' : 'X';\r\n  // Look for 2 in a row, where we can win or block a win\r\n  const board = buildBoard();\r\n  const twos = wins.filter(win => twoInARow(board, win, letter));\r\n\r\n  if (twos.length === 0) {\r\n    // We can't win/block on this turn\r\n    return false;\r\n  } else {\r\n    // We can win/block! Grab one of the winning moves, and fill in the blank\r\n    const winningPattern = shuffle(twos).pop();\r\n    for (let i = 0; i < winningPattern.length; i++) {\r\n      if (isEmpty(winningPattern[i])) {\r\n        markCell(winningPattern[i]);\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Check if there are two letters out of three, with a blank space\r\nfunction twoInARow(board, winningPattern, letter) {\r\n  let blanks = 0;\r\n  let letters = 0;\r\n\r\n  for (let i = 0; i < winningPattern.length; i++) {\r\n    const cellContents = cells[winningPattern[i]].textContent;\r\n    if (cellContents === '') {\r\n      blanks++;\r\n    } else if (cellContents === letter) {\r\n      letters++;\r\n    }\r\n  }\r\n  return (blanks === 1 && letters === 2);\r\n}\r\n\r\nfunction goInCentre() {\r\n  if (isEmpty(4)) {\r\n    markCell(4);\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction goInRemaining() {\r\n  const corners = shuffle([0, 2, 6, 8]);\r\n  const remaining = shuffle([1, 3, 5, 7]);\r\n  const possibleMoves = [...corners, ...remaining];\r\n  for (let i = 0; i < possibleMoves.length; i++) {\r\n    if (isEmpty(possibleMoves[i])) {\r\n      markCell(possibleMoves[i]);\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction markCell(index) {\r\n  cells[index].textContent = 'O';\r\n  cells[index].classList.add('red');\r\n}\r\n\r\nfunction shuffle(arr) {\r\n  return arr.sort(() => 0.5 - Math.random());\r\n}\r\n"]}