{"version":3,"sources":["app.js","cpu.js"],"names":["cells","document","querySelectorAll","wins","movesMade","makeMove","isEmpty","dataset","index","stopClicks","textContent","classList","add","isGameOver","setTimeout","cpuMove","allowClicks","lastPlayer","checkForWinner","gameOver","checkForDraw","board","buildBoard","result","forEach","win","threeInARow","c","push","first","second","third","b","winner","alert","newGame","remove","addEventListener","removeEventListener","winOrBlock","goInCentre","coverOppositeCorners","offensiveMove","goInRemaining","which","letter","twos","filter","isPotentialLineForming","length","markOneOfThese","shuffle","pop","winningPattern","blanksRequired","blanks","letters","i","cellContents","markCell","cornerDanger","middleEdges","blankCorners","opponentCorners","corners","corner","moves","remaining","potentialMoves","arr","sort","Math","random"],"mappings":"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","file":"app.js","sourcesContent":["const cells = document.querySelectorAll('.cell');\r\n\r\nconst wins = [\r\n  [0,1,2], [3,4,5], [6,7,8],  // horizontal\r\n  [0,3,6], [1,4,7], [2,5,8],  // vertical\r\n  [0,4,8], [2,4,6]            // diagonal\r\n];\r\n\r\nlet movesMade = 0;\r\n\r\nfunction makeMove() {\r\n  if (!isEmpty(this.dataset.index)) return;\r\n\r\n  stopClicks();\r\n\r\n  this.textContent = 'X';\r\n  this.classList.add('blue');\r\n  movesMade++;\r\n  \r\n  if (isGameOver('Player')) return;\r\n\r\n  // Allow a little time for DOM to update (and simulate 'thinking')\r\n  setTimeout(() => {\r\n    cpuMove();\r\n    if (!isGameOver('CPU')) allowClicks();\r\n  }, 500);\r\n}\r\n\r\nfunction isGameOver(lastPlayer) {\r\n  if (checkForWinner()) {\r\n    gameOver(lastPlayer);\r\n    return true;\r\n  } else if (checkForDraw()) {\r\n    gameOver('Draw');\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction checkForWinner() {\r\n  const board = buildBoard();\r\n  \r\n  // Check the board against 'wins' array\r\n  let result = false;\r\n  wins.forEach(win => {\r\n    if (threeInARow(board, ...win)) {\r\n      result = true;\r\n    }\r\n  });\r\n  return result;\r\n}\r\n\r\n// Build array to represent the board\r\nfunction buildBoard() {\r\n  const board = [];\r\n  cells.forEach(c => board.push(c.textContent));\r\n  return board;\r\n}\r\n\r\nfunction checkForDraw() {\r\n  return (movesMade >= 9);\r\n}\r\n\r\nfunction isEmpty(index) {\r\n  return cells[index].textContent === '';\r\n}\r\n\r\nfunction threeInARow(board, first, second, third) {\r\n  const b = board;\r\n  return (b[first] !== '' && b[first] === b[second] && b[second] === b[third]);\r\n}\r\n\r\nfunction gameOver(winner) {\r\n  // Allow a little time for DOM to update\r\n  setTimeout(() => {\r\n    winner === 'Draw' ? alert(`It's a draw!`) : alert(`${winner} wins!`);\r\n    newGame();\r\n  }, 15);\r\n}\r\n\r\nfunction newGame() {\r\n  movesMade = 0;\r\n  cells.forEach(c => {\r\n    c.classList.remove('blue', 'red');\r\n    c.textContent = '';\r\n  });\r\n  // Refreshing the clicks like this fixes a pesky bug where sometimes no clicks are allowed\r\n  stopClicks();\r\n  allowClicks();\r\n}\r\n\r\nfunction allowClicks() {\r\n  cells.forEach(c => c.addEventListener('click', makeMove));\r\n}\r\n\r\nfunction stopClicks() {\r\n  cells.forEach(c => c.removeEventListener('click', makeMove));\r\n}\r\n\r\nallowClicks();","function cpuMove() {\r\n  movesMade++;\r\n\r\n  if (winOrBlock('win')) return;\r\n  else if (winOrBlock('block')) return;\r\n  else if (goInCentre()) return;\r\n  else if (coverOppositeCorners()) return;\r\n  else if (offensiveMove()) return;\r\n  else goInRemaining();\r\n}\r\n\r\nfunction winOrBlock(which) {\r\n  const letter = which === 'win' ? 'O' : 'X';\r\n  // Look for 2 in a row, where we can win or block a win\r\n  const board = buildBoard();\r\n  const twos = wins.filter(win => isPotentialLineForming(board, win, letter, 1));\r\n\r\n  if (twos.length === 0) {\r\n    // We can't win/block on this turn\r\n    return false;\r\n  } else {\r\n    // We can win/block! Grab one of the winning moves, and fill in the blank\r\n    markOneOfThese(shuffle(twos).pop());\r\n    return true;\r\n  }\r\n}\r\n\r\n// Check if there are: two OR one matching letters out of three, with one OR two blank spaces\r\nfunction isPotentialLineForming(board, winningPattern, letter, blanksRequired) {\r\n  let blanks = 0;\r\n  let letters = 0;\r\n\r\n  for (let i = 0; i < winningPattern.length; i++) {\r\n    const cellContents = cells[winningPattern[i]].textContent;\r\n    if (cellContents === '') {\r\n      blanks++;\r\n    } else if (cellContents === letter) {\r\n      letters++;\r\n    }\r\n  }\r\n  if (blanksRequired === 1) {\r\n    return (blanks === 1 && letters === 2);\r\n  } else {\r\n    return (blanks === 2 && letters === 1);\r\n  }\r\n}\r\n\r\nfunction goInCentre() {\r\n  if (isEmpty(4)) {\r\n    markCell(4);\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\n// Prevent losing due to this: http://www.wikihow.com/Win-at-Tic-Tac-Toe\r\nfunction coverOppositeCorners() {\r\n  if (!cornerDanger()) return false;\r\n\r\n  const middleEdges = shuffle([1, 3, 5, 7]);\r\n  markOneOfThese(middleEdges);\r\n  return true;\r\n}\r\n\r\nfunction cornerDanger() {\r\n  let blankCorners = 0, opponentCorners = 0;\r\n  const corners = [0, 2, 6, 8];\r\n  corners.forEach(corner => {\r\n    if (isEmpty(corner)) {\r\n      blankCorners++;\r\n    } else if (cells[corner].textContent === 'X') {\r\n      opponentCorners++;\r\n    }\r\n  });\r\n  return (blankCorners === 2 && opponentCorners === 2);\r\n}\r\n\r\nfunction offensiveMove() {\r\n  // Look for a 'O' with two blank spaces, where we can make it one away from a win\r\n  const board = buildBoard();\r\n  const moves = wins.filter(win => isPotentialLineForming(board, win, 'O', 2));\r\n\r\n  if (moves.length === 0) {\r\n    // We can't go one the offensive on this turn\r\n    return false;\r\n  } else {\r\n    // We can! Grab one of the winning moves, and get one step closer to it\r\n    markOneOfThese(shuffle(moves).pop());\r\n    return true;\r\n  }\r\n}\r\n\r\nfunction goInRemaining() {\r\n  const corners = shuffle([0, 2, 6, 8]);\r\n  const remaining = shuffle([1, 3, 5, 7]);\r\n  markOneOfThese([...corners, ...remaining]);\r\n}\r\n\r\nfunction markOneOfThese(potentialMoves) {\r\n  for (let i = 0; i < potentialMoves.length; i++) {\r\n    if (isEmpty(potentialMoves[i])) {\r\n      markCell(potentialMoves[i]);\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction markCell(index) {\r\n  cells[index].textContent = 'O';\r\n  cells[index].classList.add('red');\r\n}\r\n\r\nfunction shuffle(arr) {\r\n  return arr.sort(() => 0.5 - Math.random());\r\n}\r\n"]}